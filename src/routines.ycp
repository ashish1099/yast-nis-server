/**
 *
 * File:
 *   routines.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "Runlevel";

    /**
     * Converts from any type to boolean:
     * true, "true" and nonzero integers are true,
     * everything else including nil is false.
     * @param arg argument to convert
     * @return boolean converted value
     */
    global define toboolean (any arg) ``{
	if (arg == nil) return false;
	else if (is (arg, boolean)) return arg;
	else if (is (arg, string))  return arg == "true";
	else if (is (arg, integer)) return arg != 0;
	else return false;
    }

    /**
     * Gets the master server (name or IP?) from any of this server's maps
     * @return string	nil if no map is found or it has no YP_MASTER_NAME
     */
    global define getMaster () ``{
	string dn = lookup (user_settings, ".etc.defaultdomain", "");
	if (dn == "")
	{
	    return nil;
	}
	string ddir = sformat ("/var/yp/%1", dn);
	string any_map = nil;
	if (SCR::Read (.target.size, ddir) >=0 )
	{
	    list maps = SCR::Read (.target.dir, ddir);
	    any_map = select (maps, 0, nil);
	}
	if (any_map == nil)
	{
	    return nil;
	}
	string command = sformat ("/usr/lib/yp/makedbm -u /var/yp/%1/%2 | grep ^YP_MASTER_NAME", dn, any_map);

	string output = lookup (SCR::Execute (.target.bash_output, command), "stdout", "");
	return select (splitstring (output, " \n"), 1, nil);
    }

    /**
     * Determines if the current host is YP master or not
     * @return boolean
     */
    global define isYPMaster () ``{
	string master = getMaster();
	if (master == nil)
	{
	    return false;	// can't decide
	}

	map output = SCR::Execute (.target.bash_output, "/usr/lib/yp/yphelper --hostname");
	string yphelper_hostname = lookup (output, "stdout", "");

	return master == deletechars (yphelper_hostname, "\n");
    }

    /**
     * Checks if the YP server software is installed
     * by querying RPM for ypserv
     * @return boolean
     */
    global define isYPServerInstalled () ``{
	return (SCR::Execute(.target.bash, "/bin/rpm -q ypserv") == 0);
    }

    /**
     * Checks if the YP server was already configured
     * by reading the SCR, not user_settings
     * (not to confuse the user if he backs up to the first dialog)
     * @return boolean
     */
    global define isYPServerConfigured () ``{
	return Runlevel::ServiceEnabled ("ypserv");
    }

    /**
     * Decides whether slave exists
     * @return symbol `have_slave or `none_slave
     */
    global define SlaveExists () ``{
	if (! toboolean (lookup (user_settings, ".var.yp.makefile.NOPUSH", false)))
	    return `have_slave;

	return `none_slave;
    }

    /**
     * Checks if this host is in the slaves list on master
     * @return boolean
     */
    global define hasMasterThisSlave () ``{
	// list of maps: $["host": "foo.com", "map":"passwd.byuid"]
	list running_maps = SCR::Read (.run.ypwhich_m);
	if (running_maps != nil)
	{
	    running_maps = maplist (`m, running_maps, ``(lookup (m, "map", "")));
	    if (contains (running_maps, "ypservers"))
	    {
		string slaves = lookup (SCR::Execute (.target.bash_output, "/usr/bin/ypcat ypservers"), "stdout", nil);
		if (slaves != nil)
		{
		    string hostname = lookup (SCR::Execute (.target.bash_output, "/usr/lib/yp/yphelper --hostname"), "stdout", "");
		    if (hostname == "")
		    {
			return false;
		    }
		    hostname = substring (hostname, 0, size (hostname) - 1);
		    if (contains (splitstring (slaves, "\n"), hostname))
		    {
			return true;
		    }
		}
	    }
	}
	return false;
    }

}
