/**
 *
 * File:
 *   io.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "Runlevel";
    include "nis_server/routines.ycp";

    /**
     * Read variables, checks the file and each variable
     * @param variables map with names and default values
     * @param file filename to check for
     * @return map with read values
     */
    global define ReadPathFile (map variables, string file) ``{

	if (SCR::Read (.target.size, file) != -1)
	{
	    variables = mapmap (`name, `value, variables, ``{
		any read_value = SCR::Read (topath (name));
		if (read_value != nil)
		{
		    return [name, read_value];
		}
		else
		{
		    y2error ("Variable %1 can not be read, using default value: %2!", name, value);
		    return [name, value];
		}
	    });
	}
	else
	{
	    y2error ("File %1 does not exists, using default values!", file);
	}

	return variables;
    }


    /**
     * Removes file or directory and log errors
     * @param file what to remove
     */
    global define Remove (string file) ``{
	if (SCR::Read (.target.size, file) != -1)
	{
	    map output = SCR::Execute (.target.bash_output, sformat ("/bin/rm -rf %1", file));
	    if (size (lookup (output, "stderr", "")) > 0)
	    {
		string error_msg     = lookup (user_settings, "error", "");
		string error_details = lookup (user_settings, "error_details", "");
		// To translators: message in the popup dialog
		error_msg     = error_msg + sformat (_("Error while removing %1\n"), file);
		error_details = error_details + sformat ("<pre>%1</pre>", lookup (output, "stderr", ""));
		user_settings = add (user_settings, "error", error_msg);
		user_settings = add (user_settings, "error_details", error_details);
	    }
	}
    }

    /**
     * Ensures that the domain directory exists.
     * @param	directory	the path
     * @return	boolean		false if not and cannot be created
     */
    global define EnsureDirectory (string directory) ``{
	string error_msg     = lookup (user_settings, "error", "");
	string error_details = lookup (user_settings, "error_details", "");
	map output = $[];

	if (SCR::Read (.target.size, directory) == -1)
	{
	    output = SCR::Execute (.target.bash_output, sformat ("/bin/mkdir %1", directory));
	    if (size (lookup (output, "stderr", "")) > 0)
	    {
		// To translators: message in the popup dialog
		error_msg = error_msg + sformat (_("Directory %1 can not be created.\n"), directory);
		error_details = error_details + sformat ("<pre>%1</pre>", lookup (output, "stderr", ""));
		return false;
	    }
	}
	return true;
    }

    /**
     * Gets the YP maps from master for slave
     */
    global define YPGetMaps () ``{

	string error_msg     = lookup (user_settings, "error", "");
	string error_details = lookup (user_settings, "error_details", "");
	map output = $[];
	string dn = lookup (user_settings, ".rc.system.YP_DOMAINNAME", "");

	// first make sure that the directory exists
	if (! EnsureDirectory (sformat ("/var/yp/%1", dn)))
	{
	    return;
	}

	// and get the maps
	string master = lookup (user_settings, "ui_master_ip", "");
	output = SCR::Execute (.target.bash_output, sformat ("/usr/lib/yp/yphelper --maps %1 --domainname %2", master, dn));
	if (lookup (output, "exit", 1) != 0)
	{
	    // To translators: message in the popup dialog
	    error_msg = error_msg + sformat (_("Can not get list of maps.\n"));
	    error_details = error_details + sformat ("<pre>%1</pre>", lookup (output, "stderr", ""));
	}
	list running_maps = splitstring (lookup (output, "stdout", ""), "\n");
	// the element after the last newline is empty, remove it
	if (size (running_maps) > 0)
	{
	    running_maps = remove (running_maps, size (running_maps) - 1);
	}

	maplist (`map_name, running_maps, ``{
	    output = SCR::Execute (.target.bash_output,
				    sformat ("/usr/lib/yp/ypxfr -f -h %1 -d %2 %3",
					     master,
					     dn,
					     map_name));
	    if (lookup (output, "exit", 1) != 0)
	    {
		// To translators: message in the popup dialog
		error_msg = error_msg + sformat (_("Error while retrieving %1 map from master.\n"), map_name);
		error_details = error_details + sformat ("<pre>%1</pre>", lookup (output, "stderr", ""));
	    }
	});


	if (!contains (running_maps, "ypservers"))
	{
	    // To translators: message in the popup dialog
	    error_msg = error_msg + sformat (_("Could not get list with slaves.\n"));
	}
	else
	{
	    string slaves = lookup (SCR::Execute (.target.bash_output, "/usr/bin/ypcat ypservers"), "stdout", nil);

	    if (slaves != nil)
	    {
		string hostname = lookup (SCR::Execute (.target.bash_output, "/usr/lib/yp/yphelper --hostname"), "stdout", "");
		hostname = substring (hostname, 0, size (hostname) - 1);
		if (!contains (splitstring (slaves, "\n"), hostname))
		{
		    // To translators: message in the popup dialog
		    error_msg = error_msg + sformat (_("Hostname of this host is not listed\nin the master's list.\n"));
		}
	    }
	}

	user_settings = add (user_settings, "error", error_msg);
	user_settings = add (user_settings, "error_details", error_details);
    }



    /**
     * Save securenets list
     */

    global define SaveSecurenets () ``{

	string error_msg     = lookup (user_settings, "error", "");
	list securenets = lookup (user_settings, ".var.yp.securenets", []);

	SCR::Execute (.target.bash, sformat ("/bin/cp %1 %1.YaST2.save", "/var/yp/securenets"));
	if (SCR::Write (.var.yp.securenets, securenets) == nil)
	{
	    // To translators: message in the popup dialog
	    error_msg = error_msg + sformat (_("Error saving file %1\n"), "/var/yp/securenets");
	}
	user_settings = add (user_settings, "error", error_msg);
    }


    /**
     * Save list of slaves by calling appropriate any agent
     */
    global define SaveSlaves () ``{
	string error_msg     = lookup (user_settings, "error", "");

	SCR::Execute (.target.bash, sformat ("/bin/cp %1 %1.YaST2.save", "/var/yp/ypservers"));
	if (SCR::Write (.var.yp.ypservers, lookup (user_settings, ".var.yp.ypservers", [])) == nil)
	{
	    // To translators: message in the popup dialog
	    error_msg = error_msg + sformat (_("Error saving file %1\n"), "/var/yp/ypservers");
	}

	user_settings = add (user_settings, "error", error_msg);
    }

    /**
     * Saves config variables according to workflow
     * @param which workflow one of `none, `slave, `master
     */
    global define SaveVariables (symbol which) ``{
	string error_msg     = lookup (user_settings, "error", "");
	string error_details = lookup (user_settings, "error_details", "");

	if (which != `none)
	{
	    if (!SCR::Write(.rc.system.YP_DOMAINNAME, user_settings[".rc.system.YP_DOMAINNAME"]:""))
	    {
		// To translators: message in the popup dialog
		error_msg = error_msg + sformat (_("Error setting up variable %1\n"), "YP_DOMAINNAME");
	    }
	}

	if (which == `master)
	{
	    maplist (`var, `value, user_settings, ``{
		if (/*substring (var, 0, 10) == ".rc.system"   ||*/
		    substring (var, 0, 12) == ".rc.ypserver" ||
		    substring (var, 0, 16) == ".var.yp.makefile")
		{
		    if (!SCR::Write (topath (var), value))
		    {
			string var_name = select (splitstring (var, "."), size (splitstring (var, ".")) - 1, "");
			// To translators: message in the popup dialog
			error_msg = error_msg + sformat (_("Error setting up variable %1\n"), var_name);
		    }
		}
	    });
	}

	if (!SCR::Write (.rc.system, nil))
	{
	    // To translators: message in the popup dialog
	    error_msg = error_msg + sformat (_("Error saving file %1\n"), "/etc/rc.config");
	}

	if (which == `master)
	{
	    if (!SCR::Write (.rc.ypserver, nil))
	    {
		// To translators: message in the popup dialog
		error_msg = error_msg + sformat (_("Error saving file %1\n"), "/etc/rc.config.d/ypserv.rc.config");
	    }
	    if (!SCR::Write (.var.yp.makefile, nil))
	    {
		// To translators: message in the popup dialog
		error_msg = error_msg + sformat (_("Error saving file %1\n"), "/var/yp/Makefile");
	    }
	}

	user_settings = add (user_settings, "error", error_msg);
	user_settings = add (user_settings, "error_details", error_details);
    }

    /**
     * Starts or stop daemons
     * @param workflow what to start or save: `master, `slave, `none
     */
    global define YPDaemons (symbol workflow) ``{
	string error_msg     = lookup (user_settings, "error", "");
	string error_details = lookup (user_settings, "error_details", "");
	map output    = $[];
	list to_stop  = [];
	list to_start = [];

	if (workflow == `none)
	{
	    to_stop = ["ypxfrd", "yppasswdd", "ypserv"];
	}
	else if (workflow == `slave)
	{
	    to_stop  = ["ypxfrd", "yppasswdd", "ypserv"];
	    to_start = ["portmap", "ypserv"];
	}
	else if (workflow == `master)
	{
	    to_stop  = ["ypxfrd", "yppasswdd", "ypserv"];
	    to_start = ["portmap", "ypserv"];

	    if (lookup (user_settings, "start_yppasswdd", false))
	    {
		to_start = add (to_start, "yppasswdd");
	    }

	    if (lookup (user_settings, "start_ypxfrd", false))
	    {
		to_start = add (to_start, "ypxfrd");
	    }
	}

	map services = listmap (string s, to_stop, ``([s, "disable"]));
	foreach (string s, to_start, ``{ services[s] = "enable"; });
	// must quote, parser bug
	foreach (string s, string `action, services, ``{
	    Runlevel::ServiceAdjust (s, action);
	});

	foreach (`d, to_stop, ``{
	    y2milestone ("Stopping daemon %1", d);
	    // $#@! broken by bug 9648
	    integer ret = Runlevel::RunInitScript (d, "stop");
	    if (ret != 0)
	    {
		// To translators: message in the popup dialog
		error_msg = error_msg + sformat (_("Error while stopping %1 daemon\n"), d);
	    }
	});

	foreach (`d, to_start, ``{
	    y2milestone ("Starting daemon %1", d);
	    // start only if not running. essential for portmap! (bug #9999)
	    if (Runlevel::ServiceStatus (d) != 0) {
		integer ret = Runlevel::RunInitScript (d, "start");
		if (ret != 0)
		{
		    // To translators: message in the popup dialog
		    error_msg = error_msg + sformat (_("Error while starting %1 daemon\n"), d);
		}
	    }
	});

	user_settings = add (user_settings, "error", error_msg);
	user_settings = add (user_settings, "error_details", error_details);
    }

    /**
     * Creates initial database
     */
    global define YPMake () ``{
	string error_msg     = lookup (user_settings, "error", "");
	string error_details = lookup (user_settings, "error_details", "");
	map output =$[];
	string dn = lookup (user_settings, ".rc.system.YP_DOMAINNAME", "");

	if (! EnsureDirectory (sformat ("/var/yp/%1", dn)))
	{
	    return;
	}

	output = SCR::Execute (.target.bash_output, sformat ("/usr/bin/make -C /var/yp/%1 -f ../Makefile NOPUSH=true ypservers", dn));

	if (size (lookup (output, "stderr", "")) > 0)
	{
	    // FIXME: Error while creating ypservers
	    // To translators: message in the popup dialog
	    error_msg = error_msg + sformat (_("Error while creating database.\n"));
	    error_details = error_details + sformat ("<pre>%1</pre>", lookup (output, "stderr", ""));
	}

	output = SCR::Execute (.target.bash_output, sformat ("/usr/bin/make -C /var/yp NOPUSH=true LOCALDOMAIN=%1", dn));

	if (size (lookup (output, "stderr", "")) > 0)
	{
	    // To translators: message in the popup dialog
	    error_msg = error_msg + sformat (_("Error while creating database.\n"));
	    error_details = error_details + sformat ("<pre>%1</pre>", lookup (output, "stderr", ""));
	}

	user_settings = add (user_settings, "error", error_msg);
	user_settings = add (user_settings, "error_details", error_details);
    }

    /**
     * Calls NIS client configuration writing
     */
    global define void Client () ``{
	string error_msg = lookup (user_settings, "error", "");
	map c = $[
	    "start":	user_settings["start_ypbind"]:false,
	    "domain":	user_settings[".rc.system.YP_DOMAINNAME"]:"",
	    "servers":	[ "127.0.0.1" ],
	    ];

	boolean ok = CallFunction (`nis_write (c));
	if (!ok)
	{
	    // To translators: message in the popup dialog
	    error_msg = error_msg + _("Error while configuring the client.\n");
	}
	user_settings = add (user_settings, "error", error_msg);
    }

    /**
     * Returns list of progress labels
     * @param workflow symbol of what workflow was choosed (`none, `slave, `master)
     * @return list of localized strings
     */
    global define GetSaveList (symbol workflow) ``{

	list result = [];

	// do this remove for all workflows
	if (size (lookup (user_settings, ".rc.system.YP_DOMAINNAME", "")) > 0)
	{
	    string domain         = lookup (user_settings, ".rc.system.YP_DOMAINNAME", "");
	    // To translators: progress label
	    string save_label     = sformat (_("Remove /var/yp/%1"), domain);
	    // To translators: progress label
	    string progress_label = sformat (_("Removing /var/yp/%1"), domain);
	    term function = ``(Remove ());
	    function = add (function, sformat ("/var/yp/%1", domain));
	    result = [
		$["save_label"     : save_label,
		  "progress_label" : progress_label,
		  "function"       : function
		    ]
		];
	}

	// *** none YP server flow
	if (workflow == `none)
	{
	    result = result + [
				// To translators: progress label
		$["save_label"     : _("Set config variables."),
				// To translators: progress label
		  "progress_label" : _("Setting config variables."),
		  "function"       : ``(SaveVariables (`none))
		    ],
				// To translators: progress label
		$["save_label"     : _("Stop running daemons."),
				// To translators: progress label
		  "progress_label" : _("Stopping running daemons."),
		  "function"       : ``(YPDaemons (`none))
		    ]
		];
	}

	// *** slave YP server flow
	else if (workflow == `slave)
	{
	    result = result + [
				// To translators: progress label
		$["save_label"     : _("Get maps from master."),
				// To translators: progress label
		  "progress_label" : _("Getting maps from master."),
		  "function"       : ``(YPGetMaps ())
		    ],
				// To translators: progress label
		$["save_label"     : _("Save hosts allowed to query server."),
				// To translators: progress label
		  "progress_label" : _("Saving hosts allowed to query server."),
		  "function"       : ``(SaveSecurenets ())
		    ],
				// To translators: progress label
		$["save_label"     : _("Set config variables."),
				// To translators: progress label
		  "progress_label" : _("Setting config variables."),
		  "function"       : ``(SaveVariables (`slave))
		    ],
				// To translators: progress label
		$["save_label"     : _("Start daemon."),
				// To translators: progress label
		  "progress_label" : _("Starting daemon."),
		  "function"       : ``(YPDaemons (`slave))
		    ]
		];
	}

	// *** master YP server flow
	else if (workflow == `master)
	{
	    result = result + [
				// To translators: progress label
		$["save_label"     : _("Save hosts allowed to query server."),
				// To translators: progress label
		  "progress_label" : _("Saving hosts allowed to query server."),
		  "function"       : ``(SaveSecurenets ())
		    ]
		];

	    if (!toboolean (lookup (user_settings, ".var.yp.makefile.NOPUSH", true)) &&
		size (lookup (user_settings, ".var.yp.ypservers", [])) > 0)
	    {
		result = result + [
				// To translators: progress label
		    $["save_label"     : _("Save slaves."),
				// To translators: progress label
		      "progress_label" : _("Saving slaves."),
		      "function"       : ``(SaveSlaves ())
			]
		    ];
	    }
	    result = result + [
				// To translators: progress label
		$["save_label"     : _("Set config variables."),
				// To translators: progress label
		  "progress_label" : _("Setting config variables."),
		  "function"       : ``(SaveVariables (`master))
		    ],
				// To translators: progress label
		$["save_label"     : _("Start daemons."),
				// To translators: progress label
		  "progress_label" : _("Starting daemons."),
		  "function"       : ``(YPDaemons (`master))
		    ],
				// To translators: progress label
		$["save_label"     : _("Create initial database."),
				// To translators: progress label
		  "progress_label" : _("Creating database."),
		  "function"       : ``(YPMake ())
		    ],
		];
	}

	// slave or master is also client ?
	if (contains ([`slave, `master], workflow))
	{
	    if (lookup (user_settings, "start_ypbind", false))
	    {
		result = result + [
				// To translators: progress label
		    $["save_label"     : _("Start NIS client."),
				// To translators: progress label
		      "progress_label" : _("Starting NIS client."),
		      "function"       : ``(Client ())
			]
		    ];
	    }
	    else
	    {
		result = result + [
				// To translators: progress label
		    $["save_label"     : _("Stop NIS client."),
				// To translators: progress label
		      "progress_label" : _("Stopping NIS client."),
		      "function"       : ``(Client ())
			]
		    ];
	    }

	}

	return result;
    }


    /* **************************
     * ***** Default values *****
     * **************************
     */
    global define YPMakefileVars () ``{
	return $[
	    ".var.yp.makefile.NOPUSH"        : "true",
	    ".var.yp.makefile.MERGE_PASSWD"  : "true",
	    ".var.yp.makefile.MERGE_GROUP"   : "true",
	    ".var.yp.makefile.MINUID"        : "100",
	    ".var.yp.makefile.MINGID"        : "100",
	    ".var.yp.makefile.maps"          : ["passwd", "group", "rpc", "services", "netid"]
	    ];
    }

    global define YPServerVars () ``{
	return $[
	    ".rc.ypserver.YPPWD_CHFN"        : "no",
	    ".rc.ypserver.YPPWD_CHSH"        : "no",
	    ".rc.ypserver.YPPWD_SRCDIR"      : "/etc"
	    ];
    }

    global define YPSystemVars () ``{
	return $[
	    ".rc.system.YP_DOMAINNAME"       : "local"
	    ];
    }

    global define YPSecurenets () ``{
	return $[".var.yp.securenets" : [$["netmask" : "255.0.0.0",
					   "network" : "127.0.0.0"
					     ]
		     ]];
    }

    global define YPServers () ``{
	return $[".var.yp.ypservers" : []];
    }
}
