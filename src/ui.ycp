/**
 *
 * File:
 *   ui.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    include "nis_server/what.ycp";
    include "nis_server/slave.ycp";
    include "nis_server/master.ycp";
    include "nis_server/details.ycp";
    include "nis_server/slaves.ycp";
    include "nis_server/maps.ycp";
    include "nis_server/securenets.ycp";

    include "nis_server/io.ycp";
    include "nis_server/routines.ycp";

    import "Progress";
    import "Runlevel";

    /**
     * Popup to confirm after finish is pressed
     * @return symbol `yes or `back
     */
    global define FinishPopup () ``{
			       // To translators: ContinueCancel Popup
	if (UI::ContinueCancelHeadlinePopup (_("Finish"), _("Really save configuration ?")))
	    return `yes;
	return `back;
    }

    /**
     * Popup to confirm vhen exitting without saving
     */
    global define ExitPopup () ``{

				// To translators: YesNo Popup
	if (UI::YesNoHeadlinePopup (_("Exit"), _("Really exit configuration without saving ?")))
	    return `exit;
	return `back;
    }

    /**
     * Popup with details error
     */
    global define DetailsPopup () ``{

				// To translators: popup label
	UI::LongTextPopup (_("Error details"), `RichText (lookup (user_settings, "error_details", "")), 50, 20 );
	return `ok;
    }

    /**
     * Dialog displayed during reading configuration.
     * Sets user_settings.
     * @return symbol `next
     */
    global define ReadConfigDialog () ``{

	// help text 1/1
	string help = _("<p>Please wait while reading the configuration.</p>");
	string title = _("Initializing NIS server setup");
	string progress_title = " ";

	list files = [
	    "/var/yp/Makefile",
	    "/etc/sysconfig/ypserv",
	    "/etc/defaultdomain",
	    "/var/yp/securenets",
	    "/var/yp/ypservers"
	    ];
	list vars = [
	    ``(YPMakefileVars ()),
	    ``(YPServerVars ()),
	    ``(YPSystemVars ()),
	    ``(YPSecurenets ()),
	    ``(YPServers ())
	    ];
				// To translators: dialog title
	Progress::New (title, progress_title, size (files) + 2,
		       // To translators: progress label %1 is filename
		       maplist (`file, files, ``(sformat (_("Load '%1' file"), file)))
		       + [
			   // Trans: progress label
			   _("Determine running services"),
			   // Trans: progress label
			   _("Determine server type"),
			   ],
		       // To translators: progress label %1 is filename
		       maplist (`file, files, ``(sformat (_("Loading '%1'..."), file)))
		       + [
			   // Trans: progress label
			   _("Determining running services"),
			   // Trans: progress label
			   _("Determining server type"),
			   // Trans: progress label
			   _("Done."),
			   ],
		       help);

	integer i = 0;
	while (i < size (files))
	{
	    Progress::NextStage ();
	    // yuck - list of terms with a map as a default value - eval rules
	    user_settings = user_settings + ReadPathFile (eval (vars[i]:$[]), files[i]:"");
	    i = i + 1;
	}

	Progress::NextStage ();
	// "ypserv" is handled elsewhere
	list(string) services = ["yppasswdd", "ypxfrd", "ypbind"];
	foreach (string s, services, ``{
	    boolean e = Runlevel::ServiceEnabled (s);
	    user_settings = add (user_settings, sformat ("start_%1", s), e);
	});

	user_settings = add (user_settings, "old_domainname",
			     lookup (user_settings, ".etc.defaultdomain", ""));

	Progress::NextStage ();
	if (!isYPServerInstalled ())
	{
	    user_settings = add (user_settings, "ui_what", `none);
	}
	else
	{
	    user_settings = add (user_settings, "ui_what", isYPMaster ()? `master: `slave);
	    //FIXME: this will give a hostname. the label says IP.
	    string master = getMaster();
	    if (master != nil)
	    {
		user_settings = add (user_settings, "ui_master_ip", master);
	    }
	}

	Progress::NextStage ();
	return `next;
    }

    /**
     * Dialog displayed during saving
     */
    global define SavingDialog () ``{

	// help text 1/1
	string help = _("<p>Please wait until the configuration is saved.</p>");
	string title = _("Saving NIS server setup");
	string progress_title = " ";
	Wizard::RestoreNextButton();
	UI::ChangeWidget (`id (`next), `Enabled, false);
	UI::ChangeWidget (`id (`abort), `Enabled, false);

	symbol workflow = lookup (user_settings, "ui_what", `error);
	list save_list = GetSaveList (workflow);
	integer step = 0;

	// To translators: dialog title
	Progress::New (title, progress_title, size (save_list),
		       maplist (`e, save_list, ``(e["save_label"]:"")),
		       maplist (`e, save_list, ``(e["progress_label"]:""))
		       // To translators: progress message
		       + [_("Done.")],
		       help);

	foreach (map save_item, save_list, ``{
	    Progress::NextStage ();
	    y2milestone ("Calling: %1", save_item["function"]:"");
	    //sleep (1000);
	    eval (save_item["function"]:"");
	});

	Progress::NextStage ();

	return `done;
    }

    /**
     * Popup dispaying configuration result
     */
    global define ResultPopup () ``{

	string message = "";
	if (size (lookup (user_settings, "error", "")) > 0)
	{
				// To translators: popup label
	    message = sformat (_("Error during configuration:\n%1"),
			       lookup (user_settings, "error", ""));

				// To translators: Error popup
	    return UI::AnyQuestionPopup (ErrorMsg(), message, OKButtonLabel(), _("&Details"), `focus_yes) ? `ok : `details;
	    //UI::ErrorPopup (message);
	}
	else
	{
	    if (lookup (user_settings, "start_ypbind", false) &&
		lookup (user_settings, "old_domainname", nil) != "" &&
		lookup (user_settings, "old_domainname", nil) !=
		lookup (user_settings, ".etc.defaultdomain", nil))
	    {
		// To translators: final popup
		UI::WarningPopup (_("The domain has changed.
You must reboot for the changes to take effect."));

	    }
	    else
	    {
		// To translators: final popup
		message = _("The configuration was succesful!");
		UI::NotifyPopup (message);
	    }
	}

	return `ok;
    }

    /**
     * Checks if the YP server package is installed
     * and calls installation if not
     * @return symbol `master or `slave
     */
    global define InstallServer () ``{

	if (isYPServerInstalled ())
	{
	    return lookup (user_settings, "ui_what", `master);
	}

	map script = $[
	    "userInput" : false,
	    "install"   : ["ypserv"],
	    "delete"    : []
	    ];

	string file = SCR::Read (.target.tmpdir);
	file = file + "/ypserv.sw_single";
	SCR::Write (.target.ycp, file, script);
	CallFunction (`sw_single (file));


	return lookup (user_settings, "ui_what", `master);
    }
}
