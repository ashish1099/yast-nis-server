/**
 *
 * File:
 *   slave.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "Wizard";
    include "ui/common_popups.ycp";
    include "network/ip.ycp";
    include "network/dns.ycp";

    include "nis_server/routines.ycp";

    /**
     * Slave dialog
     * @return `back, `abort or `next
     */
    global define symbol SlaveDialog () ``{

	// help text 1/2
	string helptext = _("<p>Enter the NIS <b>domain</b> and the IP <b>address</b> of the master NIS server.</p>");
	// help text 2/2
	helptext = helptext + _("<p>If this host is also an NIS client, check the appropriate button.</p>");

	term contents = `VBox ();
				// To translators: textentry label
	contents = add (contents, `TextEntry (`id (`domain), _("NIS &domain name:"),
					      lookup (user_settings, ".etc.defaultdomain", "")));
	contents = add (contents, `VSpacing (0.5));
				// To translators: text entry label
	contents = add (contents, `TextEntry (`id (`master_ip), _("NIS &master server:"),
					      lookup (user_settings, "ui_master_ip", "")));
	contents = add (contents, `VSpacing ());
				// To translators: text entry label
	contents = add (contents, `CheckBox (`id (`also_client), _("This host is also a NIS &client"),
					     lookup (user_settings, "start_ypbind", false)));

	contents = `HVSquash (contents);

				// To translators: dialog label
	Wizard::SetContents (_("Network Information Service -- Slave Server Setup"), contents, helptext, true, true);

	symbol ui = nil;

	repeat
	{
	    ui = UI::UserInput ();
	    if (ui == `cancel)
	    {
		ui = `abort;
	    }

	    if (ui == `next)
	    {
		string master_ip  = UI::QueryWidget (`id (`master_ip), `Value);
		string domainname = UI::QueryWidget (`id (`domain), `Value);
		if (!check_address (master_ip))
		{
		    // To translators: error message
		    UI::SetFocus (`id (`master_ip));
		    UI::ErrorPopup (valid_address ());
		    ui = nil;
		}
		else if (!Nis::check_nisdomainname (domainname))
		{
		    UI::SetFocus (`id (`domain));
		    UI::ErrorPopup (Nis::valid_nisdomainname ());
		    ui = nil;
		}
	    }

	    if (ui == `abort && !UI::ReallyAbortPopup (true)) continue;
	}
	until (contains ([`next, `back, `abort], ui));

	user_settings = add (user_settings, "ui_master_ip", UI::QueryWidget (`id (`master_ip), `Value));
	user_settings = add (user_settings, "start_ypbind", UI::QueryWidget (`id (`also_client), `Value));
	user_settings = add (user_settings, ".etc.defaultdomain", UI::QueryWidget (`id (`domain), `Value));

	return ui;
    }

}
