/**
 *
 * File:
 *   securenets.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "Wizard";
    include "ui/common_popups.ycp";
    include "network/ip.ycp";

    /**
     * Creates items for table from var_yp_securenets.scr any agent
     * @param nets list output from securenets agent
     * @return list of items formated for for table
     */
    global define ItemizeSecurenets (list nets) ``{
	list not_comment = filter (`e, nets, ``(haskey (e, "netmask") || haskey (e, "network")));
	list result = [];
	integer i = 0;
	foreach (map element, not_comment, ``{
	    result = add (result, `item (`id (i),
					 lookup (element, "netmask", ""),
					 lookup (element, "network", "")));
	    i = i + 1;
	});
	return result;
    }

    /**
     * Merge edited entries with the original entries with comments
     * @param orig list of original entries (with comments)
     * @param edit list with edited entries (as placed in the table)
     * @return list with merged entries
     */
    global define MergeNetsEntries (list orig, list edit) ``{

	list edit_maps = maplist (`e, edit, ``(
				      $["netmask" : select (e, 1, ""),
					"network" : select (e, 2, "")]
	));


	list result = filter (`e, orig, ``(haskey (e, "hash") || haskey (e, "comment") || contains (edit_maps, e)));
	edit_maps = filter (`e, edit_maps, ``(!contains (result, e)));
	result = result + edit_maps;

	return result;
    }

    /**
     * Popup dialog for editing netmask/network
     * @param id id of item
     * @param netmask netmask
     * @param network network
     * @return item|void new item or nil on cancel
     */
    global define NetsEditPopup (integer id, string netmask, string network) ``{

	term buttons  = `HBox ();
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`ok), `opt (`default), OKButtonLabel()));
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`cancel), CancelButtonLabel()));

	term contents = `VBox ();
	contents = add (contents, `VSpacing (0.3));
			       // To translators: popup dialog heading
	contents = add (contents, `Heading (_("Edit netmask and network")));
	contents = add (contents, `VSpacing (0.5));
				// To translators: textentry label
	contents = add (contents, `TextEntry (`id(`netmask), _("Net&mask"), netmask));
	contents = add (contents, `VSpacing (0.3));
				// To translators: textentry label
	contents = add (contents, `TextEntry (`id(`network), _("Net&work"), network));
	contents = add (contents, `VSpacing (0.5));
	contents = add (contents, buttons);
	contents = add (contents, `VSpacing (0.3));
	contents = `HBox (`HSpacing (), contents, `HSpacing ());

	UI::OpenDialog (contents);

	symbol ui = nil;
	string error_msg = "";

	repeat {
	    error_msg = "";
	    ui = UI::UserInput ();

	    if (ui == `ok)
	    {
		netmask = UI::QueryWidget (`id (`netmask), `Value);
		network = UI::QueryWidget (`id (`network), `Value);
				// To translators: error message
		error_msg = error_msg + (check_netmask (netmask) ? "" : _("Wrong netmask!\n"));
				// To translators: error message
		error_msg = error_msg + (check_ip4 (network) ? "" : _("Wrong network!\n"));

		if (size (error_msg) > 0)
		{
		    UI::ErrorPopup (error_msg);
		}
	    }

	} until ((error_msg == "" && ui == `ok) || ui == `cancel);

	UI::CloseDialog ();

	return ui == `ok ? `item (`id (id), netmask, network) : nil;
    }

    /**
     * Securenets dialog
     */
    global define QueryHosts () ``{

	// help text 1/4
	string helptext = _("<p>Please enter which hosts are allowed to query the NIS server.</p>");
	// help text 2/4
	helptext = helptext + _("<p>A host address will be allowed if <b>network</b> is equal
to the  bitwise <i>AND</i> of the host's address and the <b>netmask</b>.</p>");
	// help text 3/4
	helptext = helptext + _("<p>The entry with <b>netmask</b> <tt>255.0.0.0</tt> and <b>network</b>
<tt>127.0.0.0</tt> must exist to allow connections from the local host.</p>
");
	// help text 4/4
	helptext = helptext + _("<p>If <b>netmask</b> <tt>0.0.0.0</tt> and <b>network</b> <tt>0.0.0.0</tt> is entered,
it gives access to all hosts.</p>
");

	list allow_query = ItemizeSecurenets (lookup (user_settings, ".var.yp.securenets", []));
	integer n_items = size (allow_query);

	term buttons = `HBox ();
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`add), _("A&dd")));
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`edit), _("&Edit")));
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`delete), _("De&lete")));

	term contents = `VBox ();
	contents = add (contents, `Table (`id (`table), `opt (`notify, `immediate),
					  // To translators: table headers
					  `header (_("Netmask"), _("Network")), allow_query));
	contents = add (contents, buttons);


				// To translators: dialog label
	Wizard::SetContents (_("NIS Server Query Hosts Setup"), contents, helptext, true, true);
	UI::ChangeWidget (`id (`next), `Label, FinishButtonLabel());

	symbol ui = nil;

	repeat
	{
	    boolean anyitems = UI::QueryWidget (`id (`table), `CurrentItem) != nil;
	    UI::ChangeWidget (`id (`edit), `Enabled, anyitems);
	    UI::ChangeWidget (`id (`delete), `Enabled, anyitems);

	    ui = UI::UserInput ();

	    if (ui == `delete)
	    {
		integer id = UI::QueryWidget (`id (`table), `CurrentItem);
		allow_query = filter (`e, allow_query, ``(id != select (select (e, 0, []), 0, -1)));
		UI::ChangeWidget(`id(`table), `Items, allow_query);
	    }

	    else if (ui == `edit)
	    {
		integer id = UI::QueryWidget (`id (`table), `CurrentItem);
		term item  = find (`e, allow_query, ``(id == select (select (e, 0, []), 0, -1)));
		item = NetsEditPopup (id, select (item, 1, ""), select (item, 2, ""));
		if (item != nil)
		{
		    allow_query = maplist (`e, allow_query, ``{
			return select (select (e, 0, []), 0, -1) == id ? item : e;
		    });
		    UI::ChangeWidget (`id (`table), `Items, allow_query);
		}
	    }

	    else if (ui == `add)
	    {
		term new_item = NetsEditPopup (n_items, "", "");
		if (new_item != nil)
		{
		    n_items = n_items + 1;
		    allow_query = add (allow_query, new_item);
		    UI::ChangeWidget (`id (`table), `Items, allow_query);
		}
	    }

	    if (ui == `abort && !UI::ReallyAbortPopup (true)) continue;
	}
	until (contains ([`back, `next, `abort], ui));

	if (ui == `back) UI::ChangeWidget (`id (`next), `Label, NextButtonLabel());

	// and finally merge

	user_settings = add (user_settings, ".var.yp.securenets",
			     MergeNetsEntries (lookup (user_settings, ".var.yp.securenets", []), allow_query));

	return ui;
    }

}
