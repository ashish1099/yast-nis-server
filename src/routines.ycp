/**
 *
 * File:
 *   routines.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";
    import "NisServer";
    import "Runlevel";

    /**
     * Converts from any type to boolean:
     * true, "true" and nonzero integers are true,
     * everything else including nil is false.
     * @param arg argument to convert
     * @return converted value
     */
    global define boolean toboolean (any arg) ``{
	if (arg == nil) return false;
	else if (is (arg, boolean)) return arg;
	else if (is (arg, string))  return arg == "true";
	else if (is (arg, integer)) return arg != 0;
	else return false;
    }

    /**
     * @return Checks if the YP server was already configured
     * by reading the SCR, not the module data
     * (not to confuse the user if he backs up to the first dialog)
     */
    global define boolean isYPServerConfigured () ``{
	return Runlevel::ServiceEnabled ("ypserv");
    }

    /**
     * Decides whether slave exists
     * (according to makefile.NOPUSH)
     * @return `have_slave or `none_slave
     */
    global define symbol SlaveExists () ``{
	return NisServer::nopush? `none_slave: `have_slave;
    }

    // unused
    /**
     * @return Checks if this host is in the slaves list on master
     */
    global define boolean hasMasterThisSlave () ``{
	// list of maps: $["host": "foo.com", "map":"passwd.byuid"]
	list running_maps = SCR::Read (.run.ypwhich_m);
	if (running_maps != nil)
	{
	    running_maps = maplist (map m, running_maps, ``(m["map"]:""));
	    if (contains (running_maps, "ypservers"))
	    {
		string slaves = lookup (SCR::Execute (.target.bash_output, "/usr/bin/ypcat ypservers"), "stdout", nil);
		if (slaves != nil)
		{
		    string hostname = lookup (SCR::Execute (.target.bash_output, "/usr/lib/yp/yphelper --hostname"), "stdout", "");
		    if (hostname == "")
		    {
			return false;
		    }
		    hostname = substring (hostname, 0, size (hostname) - 1);
		    if (contains (splitstring (slaves, "\n"), hostname))
		    {
			return true;
		    }
		}
	    }
	}
	return false;
    }
}
