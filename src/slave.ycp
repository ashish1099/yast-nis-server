/**
 *
 * File:
 *   slave.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "Wizard";
    import "Popup";

    import "NisServer";
    import "Nis";
    import "IP";
    include "nis_server/routines.ycp";

    /**
     * Slave dialog
     * @return `back, `abort or `next
     */
    define symbol SlaveDialog () ``{

	// help text 1/2
	string helptext = _("<p>Enter the NIS <b>domain</b> and the IP <b>address</b> of the master NIS server.</p>");
	// help text 2/2
	helptext = helptext + _("<p>If this host is also an NIS client using this machine as a server, check the appropriate button.</p>");

	term contents = `VBox ();
				// To translators: textentry label
	contents = add (contents, `TextEntry (`id (`domain), _("NIS &domain name:"),
					      NisServer::domain));
	contents = add (contents, `VSpacing (0.5));
				// To translators: text entry label
	contents = add (contents, `TextEntry (`id (`master_ip), _("NIS &master server:"),
					      NisServer::ui_master_ip));
	contents = add (contents, `VSpacing ());
				// To translators: text entry label
	contents = add (contents, `CheckBox (`id (`also_client), _("This host is also a NIS &client"),
					     NisServer::start_ypbind));

	contents = `HVSquash (contents);

				// To translators: dialog label
	Wizard::SetContents (_("Network Information Service -- Slave Server Setup"), contents, helptext, true, true);

	symbol ui = nil;

	repeat
	{
	    ui = (symbol) UI::UserInput ();
	    if (ui == `cancel)
	    {
		ui = `abort;
	    }

	    if (ui == `next)
	    {
		string master_ip  = (string) UI::QueryWidget (`id (`master_ip), `Value);
		string domainname = (string) UI::QueryWidget (`id (`domain), `Value);
		if (!IP::Check4(master_ip))
		{
		    // To translators: error message
		    UI::SetFocus (`id (`master_ip));
		    Popup::Error (IP::Valid4());
		    ui = `again;
		}
		else if (!Nis::check_nisdomainname (domainname))
		{
		    UI::SetFocus (`id (`domain));
		    Popup::Error (Nis::valid_nisdomainname ());
		    ui = `again;
		}
		if (ui == `next)
		{
		    NisServer::start_ypbind = (boolean)
			UI::QueryWidget (`id (`also_client), `Value);
		    CheckForDHCPClient (domainname);
		}
	    }

	    if (ui == `abort && !Popup::ReallyAbort (true)) ui = `again;
	}
	until (contains ([`next, `back, `abort], ui));

	NisServer::ui_master_ip = (string) UI::QueryWidget (`id (`master_ip), `Value);
	NisServer::start_ypbind = (boolean) UI::QueryWidget (`id (`also_client), `Value);
	NisServer::domain = (string) UI::QueryWidget (`id (`domain), `Value);

	return ui;
    }
}
