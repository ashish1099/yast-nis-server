/**
 *
 * File:
 *   slaves.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "Wizard";
    include "ui/common_popups.ycp";
    include "network/dns.ycp";

    include "nis_server/routines.ycp";

    /**
     * Give me one name from the list of hosts
     * @param hosts list of hosts
     * @return hostname or nil
     */
    global define string ChooseHostName(list(string) hosts) ``{
	string hname = nil;

	UI::OpenDialog(
	       `VBox(`HSpacing(40),
		     `HBox(`VSpacing(10),
			   // To translators: selection box label
			   `SelectionBox(`id(`hosts), _("&Remote hosts"), hosts)),
		     `HBox(`PushButton(`id(`ok), OKButtonLabel()),
			   `PushButton(`id(`cancel), CancelButtonLabel()))));
	any ret = nil;
	do {
	    ret = UI::UserInput();
	} while (ret != `cancel && ret != `ok);

	if (ret == `ok)
	    hname = UI::QueryWidget(`id(`hosts), `CurrentItem);

	UI::CloseDialog();

	return hname;
    };


    /**
     * Popup for editing a slaver server hostname
     * @param slave	hostname
     * @return	hostname or nil if canceled
     */
    global define string YPSlavePopup (string slave) ``{

	term hbox = `HBox ();
				// To translators: textentry label
	hbox = add (hbox, `TextEntry (`id(`slave), _("&Slave's host name"), slave));
				// To translators: pushbutton label
	hbox = add (hbox, `VBox (`VSpacing (), `PushButton (`id (`browse), _("&Browse"))));

	term contents = `VBox ();
	contents = add (contents, `VSpacing (0.3));
			       // To translators: popup dialog heading
	contents = add (contents, `Heading (_("Edit slave")));
	contents = add (contents, `VSpacing (0.5));
	contents = add (contents, hbox);
	contents = add (contents, `VSpacing (0.5));

	hbox = `HBox ();
				// To translators: pushbutton label
	hbox = add (hbox, `PushButton (`id (`ok), `opt (`default), OKButtonLabel()));
				// To translators: pushbutton label
	hbox = add (hbox, `PushButton (`id (`cancel), CancelButtonLabel()));

	contents = add (contents, hbox);
	contents = add (contents, `VSpacing (0.3));
	contents = `HBox (`HSpacing (), contents, `HSpacing ());

	UI::OpenDialog (contents);
	UI::SetFocus (`id (`slave));

	symbol ui = nil;
	string error_msg = "";

	repeat {
	    error_msg = "";
	    ui = UI::UserInput ();

	    if (ui == `ok)
	    {
		slave = tolower (UI::QueryWidget (`id (`slave), `Value));
				// To translators: error message
		error_msg = error_msg + (check_domainname (slave) ? "" : _("Wrong host name.\n"));

		if (size (error_msg) > 0)
		{
		    UI::ErrorPopup (error_msg);
		}
	    }
	    else if (ui == `browse)
	    {
		if (hosts == nil) {
				// To translators: label message
		    UI::OpenDialog(`Label(_("Scanning for hosts on this LAN...")));
		    hosts = sort(SCR::Read(.net.hostnames));
		    UI::CloseDialog();
		    if (hosts == nil) hosts = [];
		}
		string host = ChooseHostName (hosts);
		if (host != nil)
		{
		    slave = host;
		    UI::ChangeWidget(`id(`slave), `Value, host);
		}
	    }

	} until ((error_msg == "" && ui == `ok) || ui == `cancel);

	UI::CloseDialog ();

	return ui == `ok ? slave : nil;

    }

    /**
     * Slaves dialog
     * @return `back, `abort or `next
     */
    global define symbol MastersSlavesDialog () ``{

	// help text 1/1
	string helptext = _("<p>Here, enter the names of hosts to configure as NIS server slaves. Use <i>Add</i> to add a new one, <i>Edit</i>  to change an existing entry, and <i>Delete</i> to remove an entry.</p>");

	list slaves = lookup (user_settings, ".var.yp.ypservers", []);
	list hosts = nil;

	term buttons = `HBox ();
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`add), _("A&dd")));
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`edit), _("&Edit")));
				// To translators: pushbutton label
	buttons = add (buttons, `PushButton (`id (`delete), _("De&lete")));

	term contents = `VBox ();
	contents = add (contents, `ReplacePoint (`id (`replace),
				// To translators: selection box label
						 `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort(slaves))));
	contents = add (contents, buttons);

				// To translators: dialog label
	Wizard::SetContents (_("NIS Master Server Slaves Setup"), contents, helptext, true, true);

	symbol ui = nil;

	repeat
	{
	    boolean anyslaves = UI::QueryWidget (`id (`slaves), `CurrentItem) != nil;
	    UI::ChangeWidget (`id (`edit),   `Enabled, anyslaves);
	    UI::ChangeWidget (`id (`delete), `Enabled, anyslaves);

	    ui = UI::UserInput ();

	    if (ui == `edit)
	    {
		string selected = UI::QueryWidget (`id (`slaves), `CurrentItem);
		if (selected == nil) continue;
		string edited = YPSlavePopup (selected);
		if (edited != nil)
		{
		    slaves = filter (`e, slaves, ``(e != selected));
		    slaves = add (slaves, edited);
				// To translators: selectionbox label
		    UI::ReplaceWidget (`id (`replace), `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort (slaves)));
		}
	    }

	    else if (ui == `delete)
	    {
		string selected = UI::QueryWidget (`id (`slaves), `CurrentItem);
		if (selected == nil) continue;
		slaves = filter (`e, slaves, ``(e != selected));
				// To translators: selectionbox label
		UI::ReplaceWidget (`id (`replace), `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort (slaves)));
	    }

	    else if (ui == `add)
	    {
		string edited = YPSlavePopup ("");
		if (edited != nil && !contains (slaves, edited))
		{
		    slaves = add (slaves, edited);
				// To translators: selectionbox label
		    UI::ReplaceWidget (`id (`replace), `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort (slaves)));
		}
	    }

	    if (ui == `abort && !UI::ReallyAbortPopup (true)) continue;
	}
	until (contains ([`back, `next, `abort], ui));


	user_settings = add (user_settings, ".var.yp.ypservers", slaves);

	return ui;

    }

}
