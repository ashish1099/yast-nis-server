/**
 *
 * File:
 *   details.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "Label";
    import "Message";
    import "Mode";
    import "NisServer";
    import "Popup";
    import "Wizard";

    include "nis_server/routines.ycp";

    /**
     * Details dialog
     * @return `back, `abort or `next
     */
    define symbol DetailsDialog () ``{
	string srcdir = NisServer::pwd_srcdir;

	// help text 1/3
	string helptext = _("<p>You can change NIS server source directory (usually
<i>'/etc'</i>).</p>");

	// help text 2/3
	helptext = helptext + _("<p>Select if your <i>passwd</i> file should be merged with the <i>shadow</i>
file (only possible if the <i>shadow</i> file exists).</p>
");

	// help text 3/3
	helptext = helptext + _("<p>You can also adjust the minimum user and group id.</p>");

	boolean merge_passwd = NisServer::merge_passwd;

	term merge_pass_buttons = `VBox (`Left (
	    // check box label
	    `CheckBox (`id (`merge_passwd), _("Merge pa&sswords"), merge_passwd)
	));

	term minimals = `HBox ();

				// To translators: intfield label
	minimals = add (minimals, `IntField (`id (`minuid), _("Minimum &UID"), 0, 50000,
					     NisServer::minuid));
	minimals = add (minimals, `HSpacing ());
				// To translators: intfield label
	minimals = add (minimals, `IntField (`id (`mingid), _("Minimum &GID"), 0, 50000,
					     NisServer::mingid));


	term contents = `VBox ();
				// To translators: textentry label
	contents = add (contents, `TextEntry (`id (`srcdir), `opt(`notify), _("&YP Source directory"),
					      srcdir));
	contents = add (contents, `VSpacing (0.5));
	contents = add (contents, merge_pass_buttons);
	contents = add (contents, `VSpacing (0.5));
	contents = add (contents, minimals);


	contents = `HVSquash (contents);

				// To translators: dialog label
	Wizard::SetContents (_("NIS Master Server Details Setup"), contents, helptext, true, true);
	Wizard::SetNextButton(`next, Label::OKButton() );

	// If the source directory does not exist, it will be created
	// with empty passwd, group, shadow
	// If it already exists, check whether shadow exist
	// and disable some options accordingly.
	// (#15624)
	boolean srcdir_exists = nil;
	boolean shadow_exists = nil;
	boolean change_enabled = true;

	symbol ui = `again;

	repeat
	{
	    if (change_enabled)
	    {
		// srcdir now has an up-to-date value
		srcdir_exists = SCR::Read (.target.dir, srcdir) != nil;
		shadow_exists  = !srcdir_exists || SCR::Read (.target.size, sformat ("%1/shadow", srcdir)) != -1;
		UI::ChangeWidget (`id (`merge_passwd), `Enabled, shadow_exists);
	    }

	    ui = (symbol) UI::UserInput ();
	    if (ui == `cancel)
	    {
		ui = `abort;
	    }

	    change_enabled = (ui == `srcdir);
	    srcdir = (string) UI::QueryWidget (`id (`srcdir), `Value);
	    if (ui == `abort && !Popup::ReallyAbort (true)) ui = `again;
	    if (ui == `next)
	    {
		if (SCR::Read (.target.dir, srcdir) == nil && !Mode::config ())
		{
		    UI::SetFocus (`id (`srcdir));
		    ui = Popup::YesNo (
			Message::DirectoryDoesNotExistCreate (srcdir))
			? `next : `again;
		}
	    }
	}
	until (contains ([`back, `next, `abort], ui));

	NisServer::minuid = (integer) UI::QueryWidget (`id (`minuid), `Value);
	NisServer::mingid = (integer) UI::QueryWidget (`id (`mingid), `Value);
	NisServer::merge_passwd =
	    (boolean) UI::QueryWidget (`id (`merge_passwd), `Value);
	NisServer::pwd_srcdir = srcdir;

	Wizard::RestoreNextButton();
	return ui;
    }
}
