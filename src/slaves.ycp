/**
 *
 * File:             
 *   slaves.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:            
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";
    
    include "ui/wizard_dialog.ycp";
    include "ui/common_popups.ycp";
    include "network/dns.ycp";
    
    include "nis_server/routines.ycp";

    /**
     * Give me one name from the list of hosts 
     * @param hosts list of hosts
     * @return string hostname
     */
    global define ChooseHostName(list hosts) ``{
        string hname = nil;
        
	UI(`OpenDialog(
	       `VBox(`HSpacing(40),
		     `HBox(`VSpacing(10),
			   // To translators: selection box label
			   `SelectionBox(`id(`hosts), _("&Remote hosts"), hosts)),
		     `HBox(`PushButton(`id(`ok), OKButtonLabel()),
			   `PushButton(`id(`cancel), CancelButtonLabel())))));
        any ret = nil;
        do {
            ret = UI(`UserInput());
        } while (ret != `cancel && ret != `ok);
        
        if (ret == `ok)
            hname = UI(`QueryWidget(`id(`hosts), `CurrentItem));
        
        UI(`CloseDialog());
        
        return hname;
    };
    

    /**
     * Popup for adjusting slave
     * @param slave	hostname
     * @return string	hostname or nil if canceled
     */
    global define YPSlavePopup (string slave) ``{

        term hbox = `HBox ();
                                // To translators: textentry label
        hbox = add (hbox, `TextEntry (`id(`slave), _("&Slave's hostname"), slave));
                                // To translators: pushbutton label
        hbox = add (hbox, `VBox (`VSpacing (), `PushButton (`id (`browse), _("&Browse"))));

        term contents = `VBox ();
        contents = add (contents, `VSpacing (0.3));
                               // To translators: popup dialog heading
        contents = add (contents, `Heading (_("Edit slave")));
        contents = add (contents, `VSpacing (0.5));
        contents = add (contents, hbox);
        contents = add (contents, `VSpacing (0.5));

        hbox = `HBox ();
                                // To translators: pushbutton label
        hbox = add (hbox, `PushButton (`id (`ok), `opt (`default), OKButtonLabel()));
                                // To translators: pushbutton label
        hbox = add (hbox, `PushButton (`id (`cancel), CancelButtonLabel()));
        
        contents = add (contents, hbox);
        contents = add (contents, `VSpacing (0.3));
        contents = `HBox (`HSpacing (), contents, `HSpacing ());
        
        UI (`OpenDialog (contents));

        symbol ui = nil;
        string error_msg = "";

        repeat {
            error_msg = "";
            ui = UI (`UserInput ());

            if (ui == `ok)
            {
                slave = tolower (UI (`QueryWidget (`id (`slave), `Value)));
                                // To translators: error message
                error_msg = error_msg + (check_domainname (slave) ? "" : UI(_("Wrong hostname!\n")));

                if (size (error_msg) > 0)
                {
                    UI (`ErrorPopup (error_msg));
                }
            }
            else if (ui == `browse)
            {
                if (hosts == nil) {
                                // To translators: label message
                    UI(`OpenDialog(`Label(_("Scanning for hosts on this LAN..."))));
                    hosts = sort(SCR(`Read(.net.hostnames)));
                    UI(`CloseDialog());
                    if (hosts == nil) hosts = [];
                }
                string host = ChooseHostName (hosts);
                if (host != nil)
                {
                    slave = host;
                    UI(`ChangeWidget(`id(`slave), `Value, host));
                }
            }

        } until ((error_msg == "" && ui == `ok) || ui == `cancel);

        UI (`CloseDialog ());

        return ui == `ok ? slave : nil;
        
    }

    /**
     * Slaves dialog
     */
    global define MastersSlavesDialog () ``{

        // help text 1/1
        string helptext = UI (_("<p>Here you can set up names of hosts that will be configured as NIS server slaves. Use <i>Add</i> button to add a new one, <i>Edit</i> button to change existing entry and <i>Delete</i> to remove it.</p>"));

        list slaves = lookup (user_settings, ".var.yp.ypservers", []);
        list hosts = nil;

        term buttons = `HBox ();
                                // To translators: pushbutton label
        buttons = add (buttons, `PushButton (`id (`add), _("A&dd")));
                                // To translators: pushbutton label
        buttons = add (buttons, `PushButton (`id (`edit), _("&Edit")));
                                // To translators: pushbutton label
        buttons = add (buttons, `PushButton (`id (`delete), _("De&lete")));
        
        term contents = `VBox ();
        contents = add (contents, `ReplacePoint (`id (`replace), 
                                // To translators: selection box label
                                                 `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort(slaves))));
        contents = add (contents, buttons);
        
                                // To translators: dialog label
        UI (`SetWizardContents (_("NIS Master Server Slaves Setup"), contents, helptext, true, true));

        symbol ui = nil;

        repeat 
        {
	    boolean anyslaves = UI (`QueryWidget (`id (`slaves), `CurrentItem)) != nil;
	    UI (`ChangeWidget (`id (`edit),   `Enabled, anyslaves));
	    UI (`ChangeWidget (`id (`delete), `Enabled, anyslaves));

            ui = UI (`UserInput ());

            if (ui == `edit)
            {
                string selected = UI (`QueryWidget (`id (`slaves), `CurrentItem));
                if (selected == nil) continue;
                string edited = YPSlavePopup (selected);
                if (edited != nil)
                {
                    slaves = filter (`e, slaves, ``(e != selected));
                    slaves = add (slaves, edited);
                                // To translators: selectionbox label
                    UI (`ReplaceWidget (`id (`replace), `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort (slaves))));
                }
            }

            else if (ui == `delete)
            {
                string selected = UI (`QueryWidget (`id (`slaves), `CurrentItem));
                if (selected == nil) continue;
                slaves = filter (`e, slaves, ``(e != selected));
                                // To translators: selectionbox label
                UI (`ReplaceWidget (`id (`replace), `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort (slaves))));
            }

            else if (ui == `add)
            {
                string edited = YPSlavePopup ("");
                if (edited != nil && !contains (slaves, edited))
                {
                    slaves = add (slaves, edited);
                                // To translators: selectionbox label
                    UI (`ReplaceWidget (`id (`replace), `SelectionBox (`id (`slaves), `opt (`notify), _("&Slaves"), sort (slaves))));
                }
            }            

            if (ui == `abort && !UI (`ReallyAbortPopup (true))) continue;
        }
        until (contains ([`back, `next, `abort], ui));


        user_settings = add (user_settings, ".var.yp.ypservers", slaves);

        return ui;

    }

}
