/**
 *
 * File:             
 *   routines.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:            
 *   Dan Vesely <dan@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    /**
     * Converts from any type to boolean: 
     * true, "true" and nonzero integers are true,
     * everything else including nil is false.
     * @param arg argument to convert
     * @return boolean converted value
     */
    global define toboolean (any arg) ``{
    	if (arg == nil) return false;
        else if (is (arg, boolean)) return arg;
        else if (is (arg, string))  return arg == "true";
        else if (is (arg, integer)) return arg != 0;
        else return false;
    }

    /**
     * Determines if the current host is YP master or not
     * @return boolean
     */
    global define isYPMaster () ``{
        map output = $[];
        string masterentry_hostname  = "";
        string yphelper_hostname = "";
	string dn = lookup (user_settings, ".rc.system.YP_DOMAINNAME", "");
	string command = sformat ("/usr/lib/yp/makedbm -u /var/yp/%1/passwd.byname | grep ^YP_MASTER_NAME", dn);

        output = SCR (`Execute (.target.bash_output, command));
        masterentry_hostname  = select (splitstring (lookup (output, "stdout", ""), " "), 1, "");
        output = SCR (`Execute (.target.bash_output, "/usr/lib/yp/yphelper --hostname"));
        yphelper_hostname = lookup (output, "stdout", "");

        return masterentry_hostname == yphelper_hostname;
    }

    /**
     * Checks if the YP server software is installed
     * by querying RPM for ypserv
     * @return boolean
     */       
    global define isYPServerInstalled () ``{
        return (SCR (`Execute(.target.bash, "/bin/rpm -q ypserv")) == 0);
    }

    /**
     * Checks if the YP server was already configured
     * by reading the SCR, not user_settings
     * (not to confuse the user if he backs up to the first dialog)
     * @return boolean
     */
    global define isYPServerConfigured () ``{
        return (SCR (`Read (.rc.system.START_YPSERV)) == "yes");
    }

    /**
     * Decides whether slave exists
     * @return symbol `have_slave or `none_slave
     */
    global define SlaveExists () ``{
        if (! toboolean (lookup (user_settings, ".var.yp.makefile.NOPUSH", false)))
            return `have_slave;
        
        return `none_slave;
    }

    /**
     * Checks if this host is in the slaves list on master
     * @return boolean 
     */
    global define hasMasterThisSlave () ``{
	list running_maps = SCR (`Read (.run.ypwhich_m));
	if (running_maps != nil)
	{
	    running_maps = maplist (`m, running_maps, ``(lookup (m, "map")));
	    if (contains (running_maps, "ypservers"))
	    {
		string slaves = lookup (SCR (`Execute (.target.bash_output, "/usr/bin/ypcat ypservers")), "stdout");
		if (slaves != nil)
		{
		    string hostname = lookup (SCR (`Execute (.target.bash_output, "/usr/lib/yp/yphelper --hostname")), "stdout");
		    hostname = substring (hostname, 0, size (hostname) - 1);
		    if (contains (splitstring (slaves, "\n"), hostname))
		    {
			return true;
		    }
		}
	    }
	}
	return false;
    }

}
