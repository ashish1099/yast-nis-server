/**
 *
 * File:
 *   master.ycp
 *
 * Module:
 *   Network/YPServer
 *
 * Summary:
 *   YPServer module.
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * YPServer module part.
 *
 */


{

    textdomain "nis_server";

    import "CWMFirewallInterfaces";
    import "Nis";		// check_nisdomainname
    import "NisServer";
    import "Popup";
    import "Wizard";

    include "nis_server/routines.ycp";

    /**
     * Master dialog
     * @return `back, `abort, `next or `details
     */
    define symbol MasterDialog () ``{

	boolean pwd_chfn	= NisServer::pwd_chfn;
	boolean pwd_chsh	= NisServer::pwd_chsh;
	boolean start_yppasswdd	= NisServer::start_yppasswdd;
	string domain		= NisServer::domain;
	boolean start_ypbind	= NisServer::start_ypbind;
	boolean nopush		= NisServer::nopush;
	boolean start_ypxfrd	= NisServer::start_ypxfrd;

	map<string,any> firewall_widget = GetFirewallWidget ();
	term firewall_layout = firewall_widget["custom_widget"]:`VBox ();

	// help text 1/3
	string helptext = _("<p>Enter a NIS <b>domain</b>. If this host is also a NIS client using this machine as a server, check
the corresponding option.</p>
");

	// help text 2/3
	helptext = helptext + _("<p>For slave servers to cooperate with this master, check
<i>Active Slave NIS server exists</i>. If you check
<i>Fast Map distribution</i>, it will speed up the transfer of maps to the
slaves.</p>
");

	// help text 3/3
	helptext = helptext + _("<p><i>Allow changes to passwords</i> lets the users change their
passwords in the presence of NIS. Buttons to allow
changing the login shell or GECOS (full name and related information) can
be used to set up these more specific options.</p>
");

	helptext = helptext + firewall_widget["help"]:"";

	term pass_yes_buttons = `HBox (`HSpacing (3), `VBox (
	    `Left (`CheckBox (`id (`allow_gecos),
		// To translators: checkbox label
		_("Allow changes to &GECOS field"), pwd_chfn)),
	    `Left (`CheckBox (`id (`allow_shell),
		// To translators: checkbox label
		_("Allow changes to login &shell"), pwd_chsh))
	));

	term pass_buttons = `HBox (`HSpacing (), `VBox (
	    `VSpacing (0.3),
	    `Left (`CheckBox (`id (`change_passwords), `opt (`notify),
		// To translators: checkbox label
		_("Allow changes to &passwords"), start_yppasswdd)
	    ),
	    `VSpacing (0.3),
	    pass_yes_buttons,
	    `VSpacing (0.3)
	));

	term domain_frame = `HBox (`HSpacing (), `VBox (
	    `VSpacing (0.3),
	    `InputField (`id (`domain), `opt (`hstretch), "", domain),
	    `VSpacing (0.3),
	    `Left (`CheckBox (`id (`also_client),
		// To translators: checkbox label
		_("This host is also a NIS &client"), start_ypbind)
	    ),
	    `VSpacing (0.3)
	), `HSpacing (4));

	term contents = `HBox (`HSpacing (4), `VBox (
	    `VSpacing (0.5),
	    // To translators: frame label
	    `Frame (_("NIS &Domain Name"), domain_frame),
	    `VSpacing (0.5),
	    `Left (`CheckBox (`id (`have_slave),
		// To translators: checkbox label
		_("Active Slave NIS server &exists"), !nopush)
	    ),
	    `VSpacing (0.5),
	    `Left (`CheckBox (`id (`fast_map),
		// To translators: checkbox label
		_("&Fast Map distribution (rpc.ypxfrd)"), start_ypxfrd)
	    ),
	    `VSpacing (0.5),
	    // To translators: frame label
	    `Frame (_("Changing of passwords"), pass_buttons),
	    `VSpacing (0.5),
	    firewall_layout,
	    `VSpacing (0.5),
	    `PushButton (`id (`details), `opt (`key_F7),
		// To translators: pushbutton label
		_("&Other global settings ..."))
	), `HSpacing (6));

	// To translators: dialog label
	Wizard::SetContents (_("Master Server Setup"),
	    contents, helptext, true, true);

	UI::ChangeWidget (`id (`allow_shell), `Enabled, start_yppasswdd);
	UI::ChangeWidget (`id (`allow_gecos), `Enabled, start_yppasswdd);

	CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");

	map event = $[];
	any ui = nil;
	repeat
	{
	    event	= UI::WaitForEvent ();
	    ui		= event["ID"]:nil;
	    CWMFirewallInterfaces::OpenFirewallHandle(firewall_widget,"",event);
	    if (ui == `cancel)
	    {
		ui = `abort;
	    }

	    if (ui == `change_passwords)
	    {
		start_yppasswdd= (boolean)
		    UI::QueryWidget (`id (`change_passwords), `Value);
		UI::ChangeWidget (`id (`allow_shell), `Enabled,start_yppasswdd);
		UI::ChangeWidget (`id (`allow_gecos), `Enabled,start_yppasswdd);
	    }

	    else if (ui == `next)
	    {
		string domainname = (string)
		    UI::QueryWidget (`id (`domain), `Value);

		if (!Nis::check_nisdomainname (domainname))
		{
		    UI::SetFocus (`id (`domain));
		    Popup::Error (Nis::valid_nisdomainname ());
		    ui = `again;
		    continue;
		}
		domain	= domainname;
		start_ypbind	= (boolean)
		    UI::QueryWidget (`id (`also_client), `Value);
		nopush		= ! (boolean)
		    UI::QueryWidget (`id (`have_slave), `Value);
		pwd_chfn	= (boolean)
		    UI::QueryWidget (`id (`allow_gecos), `Value);
		pwd_chsh	= (boolean)
		    UI::QueryWidget (`id (`allow_shell), `Value);
		start_yppasswdd	= (boolean)
		    UI::QueryWidget (`id (`change_passwords), `Value);
		start_ypxfrd	= (boolean)
		    UI::QueryWidget (`id (`fast_map), `Value);

		CheckForDHCPClient (domainname);
		CWMFirewallInterfaces::OpenFirewallStore (
		    firewall_widget,"",event);

		if (NisServer::modified ||
		    domain != NisServer::domain ||
		    start_ypbind != NisServer::start_ypbind ||
		    nopush != NisServer::nopush ||
		    pwd_chfn != NisServer::pwd_chfn ||
		    pwd_chsh != NisServer::pwd_chsh ||
		    start_yppasswdd != NisServer::start_yppasswdd ||
		    start_ypxfrd != NisServer::start_ypxfrd)
		{
		    NisServer::modified		= true;
		    NisServer::domain		= domain;
		    NisServer::start_ypbind	= start_ypbind;
		    NisServer::nopush		= nopush;
		    NisServer::pwd_chfn		= pwd_chfn;
		    NisServer::pwd_chsh		= pwd_chsh;
		    NisServer::start_yppasswdd	= start_yppasswdd;
		    NisServer::start_ypxfrd	= start_ypxfrd;
		}
	    }

	    if (ui == `abort && !Popup::ReallyAbort (NisServer::modified))
	    {
		ui = `again;
	    }
	}
	until (	is (ui,symbol) &&
		contains ([`next, `back, `abort, `details], (symbol) ui));

	return (symbol) ui;
    }
}
